/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_Core_WRAP_H_
#define SWIG_Core_WRAP_H_

#include <map>
#include <string>


class SwigDirector_CTextileDeformer : public TexGen::CTextileDeformer, public Swig::Director {

public:
    SwigDirector_CTextileDeformer(PyObject *self);
    SwigDirector_CTextileDeformer(PyObject *self, TexGen::CTextileDeformer const &other);
    virtual ~SwigDirector_CTextileDeformer();
    virtual void DeformTextile(TexGen::CTextile &Textile, bool bDeformDomain = true);
    virtual double GetDisplacement(TexGen::XYZ Pos, int iYarn, TexGen::XYZ &Disp) const;


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* swig_protected_method_name, bool val) const
    { swig_inner[swig_protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class CTextileDeformer doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[3];
#endif

};


class SwigDirector_CTextileDeformerVolumeMesh : public TexGen::CTextileDeformerVolumeMesh, public Swig::Director {

public:
    SwigDirector_CTextileDeformerVolumeMesh(PyObject *self);
    SwigDirector_CTextileDeformerVolumeMesh(PyObject *self, TexGen::CTextileDeformerVolumeMesh const &other);
    virtual ~SwigDirector_CTextileDeformerVolumeMesh();
    virtual void DeformTextile(TexGen::CTextile &Textile, bool bDeformDomain = true);
    virtual double GetDisplacement(TexGen::XYZ Pos, int iYarn, TexGen::XYZ &Disp) const;
    virtual double GetDisplacementSwigPublic(TexGen::XYZ Pos, int iYarn, TexGen::XYZ &Disp) const {
      return TexGen::CTextileDeformerVolumeMesh::GetDisplacement(Pos,iYarn,Disp);
    }


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* swig_protected_method_name, bool val) const
    { swig_inner[swig_protected_method_name] = val;}

private:
    mutable std::map<std::string, bool> swig_inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class CTextileDeformerVolumeMesh doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[3];
#endif

};


#endif
